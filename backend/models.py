"""
Database models for news aggregator
"""
from sqlalchemy import Column, Integer, String, Text, DateTime, Date, JSON, Index
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime

Base = declarative_base()


class Article(Base):
    """
    Article model to store news articles from RSS feeds
    """
    __tablename__ = "articles"

    id = Column(Integer, primary_key=True, autoincrement=True)
    title = Column(String, nullable=False)
    link = Column(String, unique=True, nullable=False, index=True)
    source = Column(String, nullable=False, index=True)  # RSS feed source name
    published_date = Column(DateTime, nullable=True, index=True)
    content = Column(Text, nullable=True)  # Original article content/description
    summary = Column(Text, nullable=True)  # AI-generated summary
    embedding = Column(JSON, nullable=True, index=True)  # Vector embedding for semantic search
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)

    def __repr__(self):
        return f"<Article(id={self.id}, title='{self.title[:50]}...', source='{self.source}')>"

    def to_dict(self):
        """Convert article to dictionary for API responses"""
        return {
            "id": self.id,
            "title": self.title,
            "link": self.link,
            "source": self.source,
            "published_date": self.published_date.isoformat() if self.published_date else None,
            "content": self.content,
            "summary": self.summary,
            "embedding": self.embedding,  # Include embedding vector
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }


class DigestEntry(Base):
    """
    Daily digest model to store Claude-generated daily summaries
    """
    __tablename__ = "digest_entries"

    id = Column(Integer, primary_key=True, autoincrement=True)
    digest_date = Column(Date, unique=True, nullable=False, index=True)
    content = Column(Text, nullable=False)  # Full daily digest generated by Claude
    article_count = Column(Integer, default=0, nullable=False)  # Number of articles in digest
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)

    def __repr__(self):
        return f"<DigestEntry(id={self.id}, date='{self.digest_date}', articles={self.article_count})>"

    def to_dict(self):
        """Convert digest entry to dictionary for API responses"""
        return {
            "id": self.id,
            "digest_date": self.digest_date.isoformat() if self.digest_date else None,
            "content": self.content,
            "article_count": self.article_count,
            "created_at": self.created_at.isoformat() if self.created_at else None,
        }


# Create composite indexes for better query performance
Index('idx_article_source_date', Article.source, Article.published_date)
Index('idx_article_created', Article.created_at.desc())
